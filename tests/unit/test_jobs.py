# Copyright Contributors to the Packit project.
# SPDX-License-Identifier: MIT

from typing import Type

import pytest
from flexmock import flexmock

from packit.config import JobConfig, JobConfigTriggerType, JobType
from packit.config.job_config import JobMetadataConfig
from packit_service.service.events import (
    CoprBuildEndEvent,
    CoprBuildStartEvent,
    IssueCommentEvent,
    KojiBuildEvent,
    MergeRequestCommentGitlabEvent,
    MergeRequestGitlabEvent,
    PullRequestCommentGithubEvent,
    PullRequestCommentPagureEvent,
    PullRequestGithubEvent,
    PushGitHubEvent,
    PushGitlabEvent,
    ReleaseEvent,
    TestingFarmResultsEvent,
)
from packit_service.worker.handlers import (
    CoprBuildEndHandler,
    CoprBuildStartHandler,
    JobHandler,
    TestingFarmHandler,
    TestingFarmResultsHandler,
    CoprBuildHandler,
    KojiBuildHandler,
    KojiBuildReportHandler,
    ProposeDownstreamHandler,
)
from packit_service.worker.jobs import (
    get_config_for_handler_kls,
    get_handlers_for_event,
)


@pytest.mark.parametrize(
    "event_cls,db_trigger,jobs,result",
    [
        # Single job defined:
        pytest.param(
            PullRequestGithubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            {CoprBuildHandler},
            id="config=build_for_pr&pull_request&PullRequestGithubEvent",
        ),
        pytest.param(
            PullRequestGithubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.copr_build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            {CoprBuildHandler},
            id="config=copr_build_for_pr&pull_request&PullRequestGithubEvent",
        ),
        pytest.param(
            PullRequestGithubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            {CoprBuildHandler},
            id="config=test_for_pr&pull_request&PullRequestGithubEvent",
        ),
        # Not matching event:
        pytest.param(
            PullRequestGithubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                ),
            ],
            set(),
            id="config=build_for_commit&pull_request&PullRequestGithubEvent",
        ),
        # Matching events:
        pytest.param(
            MergeRequestGitlabEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            {CoprBuildHandler},
            id="config=build_for_pr&pull_request&MergeRequestGitlabEvent",
        ),
        pytest.param(
            PushGitHubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.commit),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                ),
            ],
            {CoprBuildHandler},
            id="config=build_for_push&commit&PushGitHubEvent",
        ),
        pytest.param(
            PushGitlabEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.commit),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                ),
            ],
            {CoprBuildHandler},
            id="config=build_for_push&commit&PushGitlabEvent",
        ),
        pytest.param(
            ReleaseEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.release),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                ),
            ],
            {CoprBuildHandler},
            id="config=build_for_release&release&ReleaseEvent",
        ),
        # Copr results for build:
        pytest.param(
            CoprBuildStartEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            {CoprBuildStartHandler},
            id="config=build_for_pr&pull_request&CoprBuildStartEvent",
        ),
        pytest.param(
            CoprBuildEndEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            {CoprBuildEndHandler},
            id="config=build_for_pr&pull_request&CoprBuildEndEvent",
        ),
        # Copr results for test:
        pytest.param(
            CoprBuildStartEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            {CoprBuildStartHandler},
            id="config=build_for_pr&pull_request&CoprBuildStartEvent",
        ),
        pytest.param(
            CoprBuildEndEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            {CoprBuildEndHandler},
            id="config=test_for_pr&pull_request&CoprBuildEndEvent",
        ),
        # Test results:
        pytest.param(
            TestingFarmResultsEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            {TestingFarmResultsHandler},
            id="config=test_for_pr&pull_request&TestingFarmResultsEvent",
        ),
        # Koji:
        pytest.param(
            PullRequestGithubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.production_build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            {KojiBuildHandler},
            id="config=production_build_for_pr&pull_request&PullRequestGithubEvent",
        ),
        pytest.param(
            MergeRequestGitlabEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.production_build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            {KojiBuildHandler},
            id="config=production_build_for_pr&pull_request&MergeRequestGitlabEvent",
        ),
        pytest.param(
            PushGitHubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.commit),
            [
                JobConfig(
                    type=JobType.production_build,
                    trigger=JobConfigTriggerType.commit,
                ),
            ],
            {KojiBuildHandler},
            id="config=production_build_for_commit&commit&PushGitHubEvent",
        ),
        pytest.param(
            PushGitlabEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.commit),
            [
                JobConfig(
                    type=JobType.production_build,
                    trigger=JobConfigTriggerType.commit,
                ),
            ],
            {KojiBuildHandler},
            id="config=production_build_for_commit&commit&PushGitlabEvent",
        ),
        pytest.param(
            ReleaseEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.release),
            [
                JobConfig(
                    type=JobType.production_build,
                    trigger=JobConfigTriggerType.release,
                ),
            ],
            {KojiBuildHandler},
            id="config=production_build_for_release&commit&ReleaseEvent",
        ),
        pytest.param(
            KojiBuildEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.production_build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            {KojiBuildReportHandler},
            id="config=production_build_for_pr&pull_request&KojiBuildEvent",
        ),
        # Build and test:
        pytest.param(
            PullRequestGithubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            {CoprBuildHandler},
            id="config=build_for_pr+test_for_pr&pull_request&PullRequestGithubEvent",
        ),
        pytest.param(
            CoprBuildStartEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            {CoprBuildStartHandler},
            id="config=build_for_pr+test_for_pr&pull_request&CoprBuildStartEvent",
        ),
        pytest.param(
            CoprBuildEndEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            {CoprBuildEndHandler},
            id="config=build_for_pr+test_for_pr&pull_request&CoprBuildEndEvent",
        ),
        pytest.param(
            TestingFarmResultsEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            {TestingFarmResultsHandler},
            id="config=build_for_pr+test_for_pr&pull_request&TestingFarmResultsEvent",
        ),
        # Multiple triggers for copr-build:
        pytest.param(
            PullRequestGithubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                ),
            ],
            {CoprBuildHandler},
            id="config=build_for_pr+build_for_commit+build_for_release"
            "&pull_request&PullRequestGithubEvent",
        ),
        pytest.param(
            PushGitHubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.commit),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                ),
            ],
            {CoprBuildHandler},
            id="config=build_for_pr+build_for_commit+build_for_release&commit&PushGitHubEvent",
        ),
        pytest.param(
            ReleaseEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.release),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                ),
            ],
            {CoprBuildHandler},
            id="config=build_for_pr+build_for_commit+build_for_release&release&ReleaseEvent",
        ),
        # No matching job for multiple triggers:
        pytest.param(
            ReleaseEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.release),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                ),
            ],
            set(),
            id="config=build_for_pr+build_for_commit&release&ReleaseEvent",
        ),
        # multiple events for build but test only for push:
        pytest.param(
            PullRequestGithubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                ),
            ],
            {CoprBuildHandler},
            id="config=build_for_pr+test_for_pr+build_for_commit+build_for_release"
            "&pull_request&PullRequestGithubEvent",
        ),
        pytest.param(
            PushGitHubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.commit),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                ),
            ],
            {CoprBuildHandler},
            id="config=build_for_pr+test_for_pr+build_for_commit+build_for_release"
            "&commit&PushGitHubEvent",
        ),
        pytest.param(
            CoprBuildStartEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                ),
            ],
            {CoprBuildStartHandler},
            id="config=build_for_pr+test_for_pr+build_for_commit+build_for_release"
            "&pull_request&CoprBuildStartEvent",
        ),
        pytest.param(
            CoprBuildEndEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                ),
            ],
            {CoprBuildEndHandler},
            id="config=build_for_pr+test_for_pr+build_for_commit+build_for_release"
            "&pull_request&CoprBuildEndEvent",
        ),
        pytest.param(
            TestingFarmResultsEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                ),
            ],
            {TestingFarmResultsHandler},
            id="config=build_for_pr+test_for_pr+build_for_commit+build_for_release"
            "&pull_request&TestingFarmResultsEvent",
        ),
        pytest.param(
            TestingFarmResultsEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.commit),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                ),
            ],
            set(),
            id="config=build_for_pr+test_for_pr+build_for_commit+build_for_release"
            "&commit&TestingFarmResultsEvent",
        ),
        # build for commit and release, test only for push:
        pytest.param(
            PullRequestGithubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                ),
            ],
            {CoprBuildHandler},
            id="config=test_for_pr+build_for_commit+build_for_release"
            "&pull_request&PullRequestGithubEvent",
        ),
        pytest.param(
            PushGitHubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.commit),
            [
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                ),
            ],
            {CoprBuildHandler},
            id="config=test_for_pr+build_for_commit+build_for_release"
            "&commit&PushGitHubEvent",
        ),
        pytest.param(
            CoprBuildStartEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                ),
            ],
            {CoprBuildStartHandler},
            id="config=test_for_pr+build_for_commit+build_for_release"
            "&pull_request&CoprBuildStartEvent",
        ),
        pytest.param(
            CoprBuildEndEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                ),
            ],
            {CoprBuildEndHandler},
            id="config=test_for_pr+build_for_commit+build_for_release"
            "&pull_request&CoprBuildEndEvent",
        ),
        pytest.param(
            TestingFarmResultsEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                ),
            ],
            {TestingFarmResultsHandler},
            id="config=test_for_pr+build_for_commit+build_for_release"
            "&pull_request&TestingFarmResultsEvent",
        ),
        pytest.param(
            TestingFarmResultsEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.commit),
            [
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                ),
            ],
            set(),
            id="config=test_for_pr+build_for_commit+build_for_release"
            "&commit&TestingFarmResultsEvent",
        ),
        # copr and koji build combination
        pytest.param(
            PullRequestGithubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.production_build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            {CoprBuildHandler, KojiBuildHandler},
            id="config=build_for_pr+production_build_for_pr"
            "&pull_request&PullRequestGithubEvent",
        ),
        pytest.param(
            CoprBuildStartEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.production_build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            {CoprBuildStartHandler},
            id="config=build_for_pr+production_build_for_pr"
            "&pull_request&CoprBuildStartEvent",
        ),
        pytest.param(
            KojiBuildEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.production_build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            {KojiBuildReportHandler},
            id="config=build_for_pr+production_build_for_pr"
            "&pull_request&KojiBuildEvent",
        ),
    ],
)
def test_get_handlers_for_event(event_cls, db_trigger, jobs, result):
    # We are using isinstance for matching event to handlers
    # and flexmock can't do this for us so we need a subclass to test it.
    # (And real event classes have a lot of __init__ arguments.)
    class Event(event_cls):
        def __init__(self):
            pass

        @property
        def db_trigger(self):
            return db_trigger

    event = Event()

    event_handlers = set(
        get_handlers_for_event(
            event=event,
            package_config=flexmock(jobs=jobs),
        )
    )
    assert event_handlers == result


@pytest.mark.parametrize(
    "event_cls,comment, db_trigger,jobs,result",
    [
        pytest.param(
            PullRequestCommentGithubEvent,
            "",
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            set(),
            id="config=build_for_pr&pull_request&PullRequestCommentGithubEvent"
            "&empty_comment",
        ),
        pytest.param(
            PullRequestCommentGithubEvent,
            "/packit build",
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            {CoprBuildHandler},
            id="config=build_for_pr&pull_request&PullRequestCommentGithubEvent"
            "&packit_build",
        ),
        pytest.param(
            PullRequestCommentGithubEvent,
            "/packit build",
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.copr_build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            {CoprBuildHandler},
            id="config=copr_build_for_pr&pull_request&PullRequestCommentGithubEvent"
            "&packit_build",
        ),
        pytest.param(
            PullRequestCommentGithubEvent,
            "/packit copr-build",
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            {CoprBuildHandler},
            id="config=build_for_pr&pull_request&PullRequestCommentGithubEvent"
            "&packit_copr-build",
        ),
        pytest.param(
            PullRequestCommentGithubEvent,
            "/packit build",
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            {CoprBuildHandler},
            id="config=test_for_pr&pull_request&PullRequestCommentGithubEvent"
            "&packit_build",
        ),
        pytest.param(
            PullRequestCommentGithubEvent,
            "/packit test",
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            {TestingFarmHandler},
            id="config=test_for_pr&pull_request&PullRequestCommentGithubEvent"
            "&packit_test",
        ),
        pytest.param(
            PullRequestCommentGithubEvent,
            "/packit production-build",
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.production_build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            {KojiBuildHandler},
            id="config=production_build_for_pr&pull_request&PullRequestCommentGithubEvent"
            "&packit_production-build",
        ),
    ],
)
def test_get_handlers_for_comment_event(event_cls, comment, db_trigger, jobs, result):
    # We are using isinstance for matching event to handlers
    # and flexmock can't do this for us so we need a subclass to test it.
    # (And real event classes have a lot of __init__ arguments.)
    class Event(event_cls):
        def __init__(self):
            self.comment = comment

        @property
        def db_trigger(self):
            return db_trigger

    event = Event()

    event_handlers = set(
        get_handlers_for_event(
            event=event,
            package_config=flexmock(jobs=jobs),
        )
    )
    assert event_handlers == result


@pytest.mark.parametrize(
    "handler_kls,event_cls,db_trigger,jobs,result_job_config",
    [
        # Basic copr build:
        pytest.param(
            CoprBuildHandler,
            PullRequestGithubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                )
            ],
            [JobConfig(type=JobType.build, trigger=JobConfigTriggerType.pull_request)],
            id="build_for_pr&CoprBuildHandler&PullRequestGithubEvent",
        ),
        pytest.param(
            CoprBuildStartHandler,
            CoprBuildStartEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                )
            ],
            [JobConfig(type=JobType.build, trigger=JobConfigTriggerType.pull_request)],
            id="build_for_pr&CoprBuildStartHandler&CoprBuildStartEvent",
        ),
        pytest.param(
            CoprBuildEndHandler,
            CoprBuildEndEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                )
            ],
            [JobConfig(type=JobType.build, trigger=JobConfigTriggerType.pull_request)],
            id="build_for_pr&CoprBuildEndHandler&CoprBuildEndEvent",
        ),
        # Test only for pr:
        pytest.param(
            CoprBuildHandler,
            PullRequestGithubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                )
            ],
            [JobConfig(type=JobType.tests, trigger=JobConfigTriggerType.pull_request)],
            id="tests_for_pr&CoprBuildHandler&PullRequestGithubEvent",
        ),
        # Both test and build for pr:
        pytest.param(
            CoprBuildHandler,
            PullRequestGithubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            [JobConfig(type=JobType.build, trigger=JobConfigTriggerType.pull_request)],
            id="build_for_pr+tests_for_pr&CoprBuildHandler&PullRequestGithubEvent",
        ),
        pytest.param(
            CoprBuildHandler,
            PullRequestGithubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                # Reverse order:
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            [JobConfig(type=JobType.build, trigger=JobConfigTriggerType.pull_request)],
            id="test_for_pr+build_for_pr&CoprBuildHandler&PullRequestGithubEvent",
        ),
        # Multiple builds for pr:
        pytest.param(
            CoprBuildHandler,
            PullRequestGithubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project1"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project2"),
                ),
            ],
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project1"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project2"),
                ),
            ],
            id="build_for_pr_twice&CoprBuildHandler&PullRequestGithubEvent",
        ),
        # Multiple triggers for build:
        pytest.param(
            CoprBuildHandler,
            PullRequestGithubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project1"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                    metadata=JobMetadataConfig(project="project2"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                    metadata=JobMetadataConfig(project="project3"),
                ),
            ],
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project1"),
                ),
            ],
            id="build_for_pr+build_for_commit+build_for_release"
            "&CoprBuildHandler&PullRequestGithubEvent",
        ),
        pytest.param(
            CoprBuildHandler,
            PushGitHubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.commit),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project1"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                    metadata=JobMetadataConfig(project="project2"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                    metadata=JobMetadataConfig(project="project3"),
                ),
            ],
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                    metadata=JobMetadataConfig(project="project2"),
                ),
            ],
            id="build_for_pr+build_for_commit+build_for_release"
            "&CoprBuildHandler&PushGitHubEvent",
        ),
        pytest.param(
            CoprBuildHandler,
            ReleaseEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.release),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project1"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                    metadata=JobMetadataConfig(project="project2"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                    metadata=JobMetadataConfig(project="project3"),
                ),
            ],
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                    metadata=JobMetadataConfig(project="project3"),
                ),
            ],
            id="build_for_pr+build_for_commit+build_for_release"
            "&CoprBuildHandler&ReleaseEvent",
        ),
        # Build for commit and release, test for pr
        pytest.param(
            CoprBuildHandler,
            PullRequestGithubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project1"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                    metadata=JobMetadataConfig(project="project2"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                    metadata=JobMetadataConfig(project="project3"),
                ),
            ],
            [
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project1"),
                ),
            ],
            id="tests_for_pr+build_for_commit+build_for_release"
            "&CoprBuildHandler&PullRequestGithubEvent",
        ),
        pytest.param(
            CoprBuildHandler,
            PushGitHubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.commit),
            [
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project1"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                    metadata=JobMetadataConfig(project="project2"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                    metadata=JobMetadataConfig(project="project3"),
                ),
            ],
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                    metadata=JobMetadataConfig(project="project2"),
                ),
            ],
            id="tests_for_pr+build_for_commit+build_for_release"
            "&CoprBuildHandler&PushGitHubEvent",
        ),
        pytest.param(
            CoprBuildHandler,
            ReleaseEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.release),
            [
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project1"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                    metadata=JobMetadataConfig(project="project2"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                    metadata=JobMetadataConfig(project="project3"),
                ),
            ],
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                    metadata=JobMetadataConfig(project="project3"),
                ),
            ],
            id="tests_for_pr+build_for_commit+build_for_release"
            "&CoprBuildHandler&ReleaseEvent",
        ),
        pytest.param(
            CoprBuildStartHandler,
            CoprBuildStartEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project1"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                    metadata=JobMetadataConfig(project="project2"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                    metadata=JobMetadataConfig(project="project3"),
                ),
            ],
            [
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project1"),
                ),
            ],
            id="tests_for_pr+build_for_commit+build_for_release"
            "&CoprBuildStartHandler&CoprBuildStartEvent",
        ),
        pytest.param(
            CoprBuildEndHandler,
            CoprBuildEndEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project1"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                    metadata=JobMetadataConfig(project="project2"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                    metadata=JobMetadataConfig(project="project3"),
                ),
            ],
            [
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project1"),
                ),
            ],
            id="tests_for_pr+build_for_commit+build_for_release"
            "&CoprBuildEndHandler&CoprBuildEndEvent",
        ),
        pytest.param(
            TestingFarmResultsHandler,
            TestingFarmResultsEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project1"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                    metadata=JobMetadataConfig(project="project2"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                    metadata=JobMetadataConfig(project="project3"),
                ),
            ],
            [
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project1"),
                ),
            ],
            id="tests_for_pr+build_for_commit+build_for_release"
            "&TestingFarmResultsHandler&TestingFarmResultsEvent",
        ),
        # Build for pr, commit and release, test for pr
        pytest.param(
            CoprBuildHandler,
            PullRequestGithubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project0"),
                ),
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project1"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                    metadata=JobMetadataConfig(project="project2"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                    metadata=JobMetadataConfig(project="project3"),
                ),
            ],
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project0"),
                ),
            ],
            id="build_for_pr+tests_for_pr+build_for_commit+build_for_release"
            "&CoprBuildHandler&PullRequestGithubEvent",
        ),
        pytest.param(
            CoprBuildHandler,
            PushGitHubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.commit),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project0"),
                ),
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project1"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                    metadata=JobMetadataConfig(project="project2"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                    metadata=JobMetadataConfig(project="project3"),
                ),
            ],
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                    metadata=JobMetadataConfig(project="project2"),
                ),
            ],
            id="build_for_pr+tests_for_pr+build_for_commit+build_for_release"
            "&CoprBuildHandler&PushGitHubEvent",
        ),
        pytest.param(
            CoprBuildHandler,
            ReleaseEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.release),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project0"),
                ),
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project1"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                    metadata=JobMetadataConfig(project="project2"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                    metadata=JobMetadataConfig(project="project3"),
                ),
            ],
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                    metadata=JobMetadataConfig(project="project3"),
                ),
            ],
            id="build_for_pr+tests_for_pr+build_for_commit+build_for_release"
            "&CoprBuildHandler&ReleaseEvent",
        ),
        pytest.param(
            CoprBuildStartHandler,
            CoprBuildStartEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project0"),
                ),
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project1"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                    metadata=JobMetadataConfig(project="project2"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                    metadata=JobMetadataConfig(project="project3"),
                ),
            ],
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project0"),
                ),
            ],
            id="build_for_pr+tests_for_pr+build_for_commit+build_for_release"
            "&CoprBuildStartHandler&CoprBuildStartEvent",
        ),
        pytest.param(
            CoprBuildEndHandler,
            CoprBuildEndEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project0"),
                ),
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project1"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                    metadata=JobMetadataConfig(project="project2"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                    metadata=JobMetadataConfig(project="project3"),
                ),
            ],
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project0"),
                ),
            ],
            id="build_for_pr+tests_for_pr+build_for_commit+build_for_release"
            "&CoprBuildEndHandler&CoprBuildEndEvent",
        ),
        pytest.param(
            TestingFarmResultsHandler,
            TestingFarmResultsEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project0"),
                ),
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project1"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.commit,
                    metadata=JobMetadataConfig(project="project2"),
                ),
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.release,
                    metadata=JobMetadataConfig(project="project3"),
                ),
            ],
            [
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                    metadata=JobMetadataConfig(project="project1"),
                ),
            ],
            id="build_for_pr+tests_for_pr+build_for_commit+build_for_release"
            "&TestingFarmResultsHandler&TestingFarmResultsEvent",
        ),
        # copr build and koji build:
        pytest.param(
            CoprBuildHandler,
            PullRequestGithubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.production_build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            [JobConfig(type=JobType.build, trigger=JobConfigTriggerType.pull_request)],
            id="build_for_pr+production_build_for_pr&CoprBuildHandler&PullRequestGithubEvent",
        ),
        pytest.param(
            KojiBuildHandler,
            PullRequestGithubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.production_build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            [
                JobConfig(
                    type=JobType.production_build,
                    trigger=JobConfigTriggerType.pull_request,
                )
            ],
            id="build_for_pr+production_build_for_pr&KojiBuildHandler&PullRequestGithubEvent",
        ),
        pytest.param(
            KojiBuildReportHandler,
            KojiBuildEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
                JobConfig(
                    type=JobType.production_build,
                    trigger=JobConfigTriggerType.pull_request,
                ),
            ],
            [
                JobConfig(
                    type=JobType.production_build,
                    trigger=JobConfigTriggerType.pull_request,
                )
            ],
            id="build_for_pr+production_build_for_pr&KojiBuildReportHandler&KojiBuildEvent",
        ),
        # comments:
        pytest.param(
            CoprBuildHandler,
            PullRequestCommentGithubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                )
            ],
            [JobConfig(type=JobType.build, trigger=JobConfigTriggerType.pull_request)],
            id="build_for_pr&CoprBuildHandler&PullRequestCommentGithubEvent",
        ),
        pytest.param(
            CoprBuildHandler,
            MergeRequestCommentGitlabEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                )
            ],
            [JobConfig(type=JobType.build, trigger=JobConfigTriggerType.pull_request)],
            id="build_for_pr&CoprBuildHandler&MergeRequestCommentGitlabEvent",
        ),
        pytest.param(
            CoprBuildHandler,
            PullRequestCommentPagureEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.build,
                    trigger=JobConfigTriggerType.pull_request,
                )
            ],
            [JobConfig(type=JobType.build, trigger=JobConfigTriggerType.pull_request)],
            id="build_for_pr&CoprBuildHandler&PullRequestCommentPagureEvent",
        ),
        # Build comment for test defined:
        pytest.param(
            CoprBuildHandler,
            PullRequestCommentGithubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                )
            ],
            [JobConfig(type=JobType.tests, trigger=JobConfigTriggerType.pull_request)],
            id="tests_for_pr&CoprBuildHandler&PullRequestCommentGithubEvent",
        ),
        # Testing farm on comment:
        pytest.param(
            TestingFarmHandler,
            PullRequestCommentGithubEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.pull_request),
            [
                JobConfig(
                    type=JobType.tests,
                    trigger=JobConfigTriggerType.pull_request,
                )
            ],
            [JobConfig(type=JobType.tests, trigger=JobConfigTriggerType.pull_request)],
            id="tests_for_pr&TestingFarmHandler&PullRequestCommentGithubEvent",
        ),
        # Propose update retrigger:
        pytest.param(
            ProposeDownstreamHandler,
            IssueCommentEvent,
            flexmock(job_config_trigger_type=JobConfigTriggerType.release),
            [
                JobConfig(
                    type=JobType.propose_downstream,
                    trigger=JobConfigTriggerType.release,
                )
            ],
            [
                JobConfig(
                    type=JobType.propose_downstream,
                    trigger=JobConfigTriggerType.release,
                )
            ],
            id="propose_downstream_for_release&TestingFarmHandler&PullRequestCommentGithubEvent",
        ),
    ],
)
def test_get_config_for_handler_kls(
    handler_kls: Type[JobHandler], event_cls, db_trigger, jobs, result_job_config
):
    class Event(event_cls):  # type: ignore
        def __init__(self):
            pass

        @property
        def db_trigger(self):
            return db_trigger

    event = Event()

    job_config = get_config_for_handler_kls(
        handler_kls=handler_kls,
        event=event,
        package_config=flexmock(jobs=jobs),
    )
    assert job_config == result_job_config
